{
  "hash": "f8d3addd81a05bbab00a54c740059056",
  "result": {
    "markdown": "---\nlang: es\n---\n\n# Gráficos\n\n## Paquetes gráficos\n\nExisten muchos paquetes para la representación gráfica en Julia. Los más usados son:\n\n- [Plots.jl](https://docs.juliaplots.org/)\n- [Makie.jl](https://docs.makie.org/)\n- [GadFly.jl](http://gadflyjl.org/).\n- [VegaLite.jl](https://www.queryverse.org/VegaLite.jl/stable/)\n\n\n## Gráficos con el paquete Plots.jl\n\n[Plots.js](https://docs.juliaplots.org/) es el paquete más usado por disponer de más posibilidades gráficas y ser bastante sencillo de usar.\n\nImplementa una interfaz para otras librerías gráficas (backends), por lo que en algunas ocasiones puede ser bastante lento al tener que llamar a otras librerías. \n\n![](img/logos/plotsjl.png)\n\n### Backends de Plot.jl\n\n- [GR](https://gr-framework.org/). Es el backend pro defecto. Es bastante rápida y permite tanto gráficos 2D como 3D no interactivos. Se inicializa con la función `gr()`. ([Ver ejemplos](https://docs.juliaplots.org/latest/gallery/gr/))\n- [PlotlyJS](https://plotly.com/). Es más lenta pero permite gráficos 2D y 3D interactivos con un montón de funcionalidades. Se inicializa con la función `plotlyjs()`. ([Ver ejemplos](https://docs.juliaplots.org/latest/gallery/plotlyjs/))\n- [PyPlot](https://matplotlib.org/). Utiliza la librería gráfica Matplotlib de Python por lo que es bastante lenta. Sin embargo, tiene ofrece todas las posibilidades de Matplotlib que es bastante madura. Se inicializa con la función `pyplot()`. ([Ver ejemplos](https://docs.juliaplots.org/latest/gallery/pyplot/))\n- [PGFPlotsX](). Utiliza la librería PGF/TikZ de LaTeX por lo que genera gráficos de muy alta calidad tanto en 2D como 3D, especialmente para publicaciones.Se inicializa con la función `pgfplotsx()`. ([Ver ejemplos](https://docs.juliaplots.org/latest/gallery/pgfplotsx/))\n- UnicodePlots. Permite dibujar gráficos en la terminal. Los gráficos son de poca calidad pero funciona con gran rapidez. Se inicializa con la función `unicodeplots()`. ([Ver ejemplos](https://docs.juliaplots.org/latest/gallery/unicodeplots/))\n\n### Gráfica de una función de una variable\n\n- `plot(f, min, max)`: Dibuja la gráfica de la función de una variable `f` para argumentos desde `xmin` a `xmax`. \n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing Plots\n\nf(x) = exp(-x^2 / 2)\nplot(f, -3, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n![](graficos_files/figure-pdf/cell-2-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n<!-- \n### Gráfica interactiva de una función de una variable\n\nusing Plots\nplotly()  # Usar la librería Plot.ly como back-end\n\nf(x) = exp(-x^2 / 2)\nplot(f, -3, 3)\n``` -->\n\n### Gráficas de varias funciones \n\n- `plot!(f, xmin, xmax)`: Añade la gráfica de la función de una variable `f` para argumentos desde `xmin` a `xmax` al último gráfico realizado.\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing Plots\n\nf(x) = sin(x)\ng(x) = cos(x)\nplot(f, -0, 2π)\nplot!(g)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](graficos_files/figure-pdf/cell-3-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n### Añadir puntos a una gráfica\n\n- `scatter(x, y)`: Dibuja los puntos con coordenadas x en el vector `x` y coordenadas y en el vector `y`.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing Plots\n\nf(x) = sin(x)\ng(x) = cos(x)\nplot(f, -0, 2π)\nplot!(g)\nx = [π/4, 5π/4]\ny = sin.(x)\nscatter!(x, y)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](graficos_files/figure-pdf/cell-4-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n### Ventana de graficación\n\nEs posible restringir el área de graficación (rango de valores de los ejes) de una función añadiendo los parámetros `xlims =(xmin, xmax)` para establecer el rango del eje x o `ylims = (ymin, ymax)` para establecer el rango del eje y. \n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nusing Plots\n\nf(x) = 1 / x\nplot(f, -1, 1, ylims = (-10, 10))\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](graficos_files/figure-pdf/cell-5-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n### Restringir la gráfica al dominio\n\nCuando una función no está definida para algún valor del rango de valores del eje x dado, la gráfica muestra una línea recta desde el punto de la gráfica anterior hasta el punto siguiente al punto donde la función no existe.\n\nEste comportamiento no es deseable puesto que si la función no existe en un punto no debería existir gráfica para ese punto. \n\nLa siguiente función del paquete `MTH229` se encarga de evitar esto.\n\n- `rangeclamp(f)`: Devuelve una función idéntica a la función `f` excepto para los puntos donde la función no existe o es infinito que devuelve `NaN`.\n\n### Ejemplo de restringir la gráfica al dominio\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nusing Plots\nusing MTH229\n\nf(x) = 1 / x\nplot(rangeclamp(f), -1, 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](graficos_files/figure-pdf/cell-6-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n### Gráficas paramétricas\n\nLa función `plot` también permite dibujar gráficas de funciones paramétricas pasándole las funciones de las coordenadas x e y. \n\n- `plot(f, g, min, max)`: Dibuja la gráfica de la función paramétrica $(f(t), g(t))$ para valores del parámetro `t` entre `min` y `max`.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nusing Plots\nf(x) = sin(x)\ng(x) = sin(2x)\nplot(f, g, 0, 2π)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](graficos_files/figure-pdf/cell-7-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n### Personalización de gráficos\n\nLos siguientes parámetros pueden añadirse a la función `plot` para modificar el aspecto de los gráficos.\n\n- `title`: Añade un título principal al gráfico.\n- `xlab`: Añade un título al eje x.\n- `ylab`: Añade un título al eje y.\n- `color`: Establece el color de la gráfica.\n- `linewidth`: Establece el grosor de la línea de la gráfica.\n- `linestyle`: Establece el estilo de la línea de la gráfica.\n- `aspect_ratio`: Establece la relación de aspecto entre la escala de los ejes.\n- `legend`: Activa o desactiva la leyenda del gráfico.\n\n### Ejemplo de personalización de gráficos\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nusing Plots\n\nf(x) = sin(x)\nplot(f, -π, π, title = \"Gráfica del seno\",  xlab = \"x\", ylab = \"f(x) = sen(x)\",\n  color = \"green\", linewidth = 3, linestyle = :dash, legend = false)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](graficos_files/figure-pdf/cell-8-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n### Gráficos en el espacio real\n\nPara dibujar superficies en el espacio real se utiliza la función\n\n`surface(x, y, f)`: Dibuja la superficie de la función $f(x,y)$ en el rango de valores `x` del eje x e `y` del eje y.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nusing Plots\nxs = ys = range(1, stop=10, length=100)\nf(x, y) = sin(x) + cos(y)\nsurface(xs, ys, f)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](graficos_files/figure-pdf/cell-9-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n## Gráficos con Makie\n\n![](img/logos/logo-makie.png)\n\n[`Makie`](https://docs.makie.org/) es una colección de paquetes de visualización de datos eficiente y extensible que incorpora una gran variedad de tipos de gráficos tanto en 2D como en 3D.\n\n### Backends de `Makie`\n\nAl igual que el paquete `Plots`, `Makie` utiliza distintos backends para construir el gráfico según la salida que se quiera.\n\n- `CairoMakie.jl` se utiliza para crear gráficos no interactivos de alta calidad, especialmente para publicaciones impresas.\n- `GLMakie.jl` se utiliza para crear gráficos interactivos tanto en 2D como en 3D en una ventana gráfica.\n- `WGLMakie.jl` es similar a `GLMakie.jl` pero muestra el gráfico en un navegador web.\n\n### Figuras, ejes y objetos gráficos\n\nUn gráfico con `Makie` es básicamente una figura (`Figure`) que contiene uno o varios ejes (`Axis`) que, a su vez, contienen objetos gráficos como puntos o lineas.\n\nPara crear una figura se utiliza la función\n\n- `Figure(parámetros)`: Crea un área gráfica con la configuración indicada por los `parámetros`. Entre los parámetros se puede indicar la resolución (`resolution = (ancho, largo)`) o el color de fondo (`backgroundcolor = color`).\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nusing GLMakie\nfig = Figure(backgroundcolor = :gray, resolution = (400, 300))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](graficos_files/figure-pdf/cell-10-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nPara añadir unos ejes en 2D a una figura se utiliza la función\n\n- `Axis(fig[i,j], title = titulo, xlabel = etiqueta-x, ylabel = etiqueta-y)`: Crea unos ejes en la figura `fig` con el título principal dado en `titulo`, la etiqueta del eje $x$ dada en `etiqueta-x` y la etiqueta del eje $y$ dada en `etiqueta-y`.  \nCuando se quiere incluir varios ejes en una misma figura, el vector `[i,j]`, indica la posición de los ejes, donde la primera componente indica la fila y la segunda la columna en una disposición de los ejes en forma de tabla. Si la figura solo contiene unos ejes, se utiliza el vector `[1,1]`.\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1,1], title = \"Ejes 2D\", xlabel = \"Eje x\", ylabel = \"Eje y\")\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](graficos_files/figure-pdf/cell-11-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nY para añadir unos ejes en 3D a una figura se utiliza la función\n\n- `Axis3(fig[i,j], title = titulo, xlabel = etiqueta-x, ylabel = etiqueta-y, zlabel = etiqueta-z, azimuth = ángulo-azimuth, elevation = ángulo-elevación)`: Crea unos ejes 3D en la figura `fig` con el título principal dado en `titulo`, la etiqueta del eje $x$ dada en `etiqueta-x`, la etiqueta del eje $y$ dada en `etiqueta-y`, la etiqueta del eje $z$ dada en `etiqueta-z`, y un punto de visión dado por el ángulo de azimuth (izquierda-derecha) `angulo-azimuth` radianes ($1.275 \\pi$ por defecto) y el ángulo de elevación (arriba-abajo) `ángulo-elevación` radianes ($\\pi/8$ por defecto).\nAl igual que antes, cuando se quiere incluir varios ejes en una misma figura, el vector `[i,j]`, indica la posición de los ejes, donde la primera componente indica la fila y la segunda la columna en una disposición de los ejes en forma de tabla. Si la figura solo contiene unos ejes, se utiliza el vector `[1,1]`.\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis3(fig[1,1], title = \"Ejes 3D\", xlabel = \"Eje x\", ylabel = \"Eje y\", zlabel = \"Eje z\")\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](graficos_files/figure-pdf/cell-12-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis3(fig[1,1], title = \"Ejes 3D rotados\", xlabel = \"Eje x\", ylabel = \"Eje y\", zlabel = \"Eje z\", azimuth = pi/8)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](graficos_files/figure-pdf/cell-13-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n### Diagrama de puntos\n\nPara dibujar un diagrama de puntos se utiliza la función \n\n- `scatter!(ax, xs, ys)`: Dibuja los ejes dados en `ax` los puntos con coordenadas dadas por los vectores `xs` e `ys`.\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1], title = \"Diagrama de puntos\")\nxs = [1, 2, 3]\nys = [2, 3, 1]\nMakie.scatter!(ax, xs, ys)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](graficos_files/figure-pdf/cell-14-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nLos siguientes parámetros pueden añadirse a la función anterior para modificar el aspecto del diagrama de puntos.\n\n- `marker`: Establece el tipo de punto.\n- `color`: Establece el color de los puntos.\n- `markersize`: Establece el tamaño de los puntos.\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1], title = \"Diagrama de puntos\")\nxs = [1, 2, 3]\nys = [2, 3, 1]\nMakie.scatter!(ax, xs, ys, marker = :utriangle, color= :red, markersize = 20)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![](graficos_files/figure-pdf/cell-15-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n### Diagrama de líneas\n\nPara dibujar series de líneas se utiliza la función\n\n- `lines!(ax, xs, ys)`: Dibuja en los ejes dados por `ax` una línea en el plano que une los puntos con coordenadas dadas por los vectores `xs` e `ys`.\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1], title = \"Diagrama de líneas\")\nxs = range(0, 2pi, length = 100)\nys = sin.(xs)\nlines!(ax, xs, ys)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](graficos_files/figure-pdf/cell-16-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nSi se añade un tercer vector de coordenadas `zs` sobre unos ejes 3D, se obtiene un diagrama de líneas en 3D. De esta forma se pueden representar, por ejemplo, la trayectorias de funciones vectoriales.\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis3(fig[1, 1], title = \"Diagrama de líneas 3D\")\nts = range(0, 6pi, length = 200)\nxs = cos.(ts)\nys = sin.(ts)\nzs = ts/4\nlines!(ax, xs, ys, zs)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](graficos_files/figure-pdf/cell-17-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nEn lugar de pasar las coordenadas de los puntos en vectores separados, se pueden pasar empaquetadas en tuplas mediante las estructuras `Point(x,y)` para el plano real o `Point3(x,y,z)` para el espacio real, del paquete [`GeometryBasics.jl`](https://juliageometry.github.io/GeometryBasics.jl/stable/).  \n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1], title = \"Diagrama de lineas\")\nts = range(0, 2pi, length = 200)\npoints = Point.(cos.(ts), sin.(2ts))\nlines!(ax, points)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](graficos_files/figure-pdf/cell-18-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis3(fig[1, 1], title = \"Diagrama de líneas 3D\")\nts = range(0, 6pi, length = 200)\nf(t) = [cos(t), sin(t), t/4]\npoints = Point3.(f.(ts))\nlines!(ax, points)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](graficos_files/figure-pdf/cell-19-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nEn el caso de figuras en 3D, es preferible utilizar los backend `GLMakie.jl` o `WGLMakie.jl` ya que permiten interaccionar con el el gráfico para visualizarlo desde distintas perspectivas.\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis3(fig[1, 1], title = \"Diagrama de líneas 3D\")\nts = range(0, 6pi, length = 200)\nf(t) = [cos(t), sin(t), t/4]\npoints = Point3.(f.(ts))\nlines!(ax, points)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](graficos_files/figure-pdf/cell-20-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nTambién es posible pasar a la función `lines!` un rango de valores y una función a dibujar. Esto simplifica la creación de gráficas de funciones.\n\n- `lines(ax, rango, función)`: Dibuja en los ejes dados por `ax` la gráfica de la función dada en `función` en el intervalo dado por `rango`. El intervalo del rango se especifica con la sintaxis `li..ls`, donde `li` es el límite inferior y `ls` el límite superior.\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1], title = \"Diagrama de líneas\")\nlines!(ax, 0..2pi, cos)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n![](graficos_files/figure-pdf/cell-21-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nPara añadir nuevas líneas al los ejes, basta con volver a usar la función `lines!`.\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1], title = \"Diagrama de líneas\")\nlines!(ax, 0..2pi, cos)\nlines!(ax, 0..3pi, sin)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n![](graficos_files/figure-pdf/cell-22-output-1.png){fig-pos='H'}\n:::\n:::\n\n\nLos siguientes parámetros pueden añadirse a la función anterior para modificar el aspecto del diagrama de puntos.\n\n- `linewidth`: Establece el grosor de la línea de la gráfica.\n- `linestyle`: Establece el estilo de la línea de la gráfica.\n- `color`: Establece el color de la linea.\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1], title = \"Diagrama de líneas\")\nlines!(ax, 0..2pi, cos, linewidth = 5, linestyle = :dash, color = :red)\nlines!(ax, 0..2pi, sin, linestyle = :dot, color = :green)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n![](graficos_files/figure-pdf/cell-23-output-1.png){fig-pos='H'}\n:::\n:::\n\n\n### Superficies\n\nPara dibujar superficies en 3D se utiliza la función \n\n- `surface!(ax, xs, ys, zs)`: Dibuja en los ejes 3D dados por `ax` la superficie que se obtiene al unir los puntos con coordenadas $x$ dadas por el vector `xs`, coordenadas `y` dadas por el vector `ys` y coordenadas $z$ dadas por el vector `zs`.\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nusing WGLMakie\nWGLMakie.activate!()\nfig = Figure()\nax = Axis3(fig[1, 1], title = \"Superficie\")\nxs = ys = LinRange(0, 10, 100)\nzs = [cos(x) * sin(y) for x in xs, y in ys]\nWGLMakie.surface!(ax, xs, ys, zs)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n### Leyenda\n\nSi tenemos más de una serie de datos representada en un diagrama, conviene añadir una leyenda para identificar cada serie. Podemos añadir una leyenda con la función \n\n- `axislegend(ax)`: Añade una leyenda a los ejes dados en `ax`, con las etiquetas de cada serie de datos incluida en los ejes. Para ello es necesario etiquetar cada serie de datos pasándole el parámetro `label = etiqueta` a la función que crea el objeto gráfico que representa la serie.\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nfig = Figure()\nax = Axis(fig[1, 1], title = \"Diagrama de líneas con leyenda\")\nlines!(ax, 0..2pi, cos, label = \"Coseno\")\nlines!(ax, 0..2pi, sin, label = \"Seno\")\naxislegend()\ncurrent_figure()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n## Gráficos con GadFly.jl\n\n[GadFly.js](http://gadflyjl.org/) es un paquete nativo que genera gráficos interactivos 2D y 3D por medio de librerías de Javascript basadas en la [gramática de gráficos](https://www.cs.uic.edu/~wilkinson/TheGrammarOfGraphics/GOG.html) (usada también por el paquete ggplot2 de R).\n\nAl estar implementado en Julia es mucho más rápido que Plots.js pero ofrece menos posibilidades.\n\n![](img/logos/gadfly.png)\n\n<!-- ### Gráfica de una función de una variable\n\n```julia\nusing Gadfly\n\nplot([sin, cos], 0, 2pi)\n``` -->\n\n## Gráficos con VegaLite.jl\n\n[VegaLite.jl](https://www.queryverse.org/VegaLite.jl/stable/) es un paquete que genera gráficos estáticos por medio de las librerías de Javascript de la gramática de gráficos [Vega](https://vega.github.io/). \n\nDispone de muchas más opciones de personalización de gráficos que GadFly.jl.\n\n![](img/logos/vega-little.png)\n\n<!-- ### Gráfica de una función de una variable\n\n```julia\nusing VegaLite\n\n@vlplot(\n    width=300,\n    height=150,\n    data={sequence={start=0,stop=12.7,step=0.1,as=\"x\"}},\n    transform=[\n        {calculate=\"sin(datum.x)\", as=\"sin(x)\"},\n        {calculate=\"cos(datum.x)\", as=\"cos(x)\"},\n        {fold=[\"sin(x)\", \"cos(x)\"]}\n    ],\n    mark=:line,\n    x=\"x:q\",\n    y=\"value:q\",\n    color={\"key:n\",title=nothing}\n)\n``` -->\n\n",
    "supporting": [
      "graficos_files/figure-pdf"
    ],
    "filters": []
  }
}