---
lang: es
---

# Tipos de datos y variables

## Tipos de datos num√©ricos

- Enteros: `Int64` (64 bits por defecto).
- Racionales: `Rational{Int64}`. Utilizando el operador `//`.
- Reales: `Float64` (64 bits por defecto).
- Complejos: `Complex{Int64}`. Utilizando `im` despu√©s de la parte imaginaria.

Para averiguar el tipo de un dato se utiliza la funci√≥n `typeof()`.

## Ejemplos de tipos de datos num√©ricos

```julia
julia> typeof(3)
Int64

julia> typeof(3/2)
Float64

julia> typeof(3//2)
Rational{Int64}

julia> typeof(œÄ)
Irrational{:œÄ}

julia> typeof(3+2im)
Complex{Int64}
```

## Jerarqu√≠a de tipos de datos num√©ricos

![](img/tipos-datos-numericos.png)

## Constantes predefinidas

| S√≠mbolo | Descripci√≥n           |
|:---------- |:-------------- |
| `pi` o `œÄ`    | N√∫mero irracional $\pi$                   |
| `‚ÑØ` (\\euler + TAB)    | N√∫mero irracional $e$                    |
| `Inf`    | Infinito                 |
| `NaN`    | Valor no num√©rico                       |
| `Missing`    | Valor desconocido         |

## Ejemplo de constantes predefinidas

```julia
julia> œÄ
œÄ = 3.1415926535897...

julia> 1 / 0
Inf

julia> 0 / 0
NaN

julia> Inf + Inf
Inf

julia> Inf - Inf
NaN

julia> 0 * Inf
NaN
```

## Tipos de datos alfanum√©ricos

- Caracteres: `Char`. Se representan entre comillas simples.
- Cadenas: `String`. Se representan entre comillas dobles.

```julia
julia> typeof('a')
Char

julia> typeof("julia")
String

julia> typeof("a")
String
```

## Tipo de datos booleanos

- Booleanos: `bool`. Son un subtipo de los enteros `Integer`.

Solo contienen dos posibles valores: `true` (1) y `false` (0).

```julia
julia> typeof(true)
Bool

julia> typeof(false)
Bool

julia> typeof(1 < 2)
Bool

julia> true + true
2
```

## Variables

Como lenguaje de tipado din√°mico, no es necesario declarar una variable antes de usarla. Su tipo se infiere directamente del valor asociado.

```julia
julia> x = 1
1

julia> typeof(x)
Int64

julia> x = "julia"
"julia"

julia> typeof(x)
String
```

No obstante, para variables de √°mbito local, por ejemplo en funciones, es posible fijar el tipo de una variable indic√°ndolo detr√°s de su nombre con el operador `::`.

```julia
x::Int64
```

<!-- TODO: ## Conversi√≥n de tipos -->

## Nombres de variables

Julia reconoce la codificaci√≥n Unicode (UTF-8), lo que permite utilizar caracteres con tildes, letras griegas, s√≠mbolos matem√°ticos y hasta emoticonos en los nombres de variables o funciones. Para ello se utilizan [c√≥digos especiales](https://docs.julialang.org/en/v1/manual/unicode-input/) (en muchos casos son los mismos que en LaTeX), pulsando despu√©s la tecla de tabulaci√≥n.

```julia
julia> Œ± = 1
1

julia> Œ≤ = 2
2

julia> Œ± + Œ≤
3

julia> üòÑ = "julia"
"julia"
```

Distingue entre may√∫sculas y min√∫sculas.

### Caracteres Unicode

La siguiente tabla contiene algunos caracteres Unicode habituales

| C√≥digo          | S√≠mbolo | Uso notes                     |
|:---------------- |:------ |:------------------------------- |
| `\euler`         | `‚ÑØ`    | Constante de Euler `e`                |
| `\pi`            | `œÄ`    | Constante $pi$                                |
| `\alpha`         | `Œ±`    |                                 |
| `\beta`          | `Œ≤`    |                                 |
| `\delta`         | `Œ¥`    |                                 |
| `\Delta`         | `Œî`    | Variaci√≥n              |
| `\gamma`         | `Œ≥`    |                                 |
| `\phi`           | `œï`    |                                 |
| `\Phi`           | `Œ¶`    |  |
| `x\_1`           | `x‚ÇÅ`   | Sub√≠ndices                      |
| `x\^2`           | `x¬≤`   | Super√≠ndices                    |
| `r\vec`          | `r‚Éó`   | Notaci√≥n para vectores              |
| `T\hat`          | `TÃÇ`    | Notaci√≥n para vectores unitarios          |
| `\partial`       | `‚àÇ`    | Notaci√≥n para derivadas parciales                                |
| `\nabla`         | `‚àá`    | Notaci√≥n para el gradiente    |
| `\circ`          | `‚àò`    | Operador de composici√≥n                     |
| `\cdot`          | `‚ãÖ`    | Operador de producto escalar                     |
| `\times`         | `√ó`    | Operador de producto vectorial                  |

Los operadores pueden necesitar par√©ntesis, como por ejemplo `(f ‚àò g)(x)` para la composici√≥n de `g` con `f`.

## Operadores aritm√©ticos

| Operador | Descripci√≥n           |
|:---------- |:-------------- |
| `x + y`    | Suma                       |
| `x - y`    | Resta                    |
| `x * y`    | Producto                 |
| `x / y`    | Divisi√≥n                       |
| `x √∑ y`    | Cociente divisi√≥n entera          |
| `x % y`    | Resto divisi√≥n entera                |
| `x ^ y`    | Potencia           |

## Operadores de comparaci√≥n

| Operador                   | Descripci√≥n                     |
|:---------------------------- |:------------------------ |
| `==`                 | Igualdad                 |
| `!=`, `‚â†` | Desigualdad               |
| `<`                  | Menor que                |
| `<=`, `‚â§` | Menor o igual que    |
| `>`                  | Mayor que             |
| `>=`, `‚â•` | Mayor o igual que |

## Operadores booleanos

| Operador | Descripci√≥n |
|:---------- |:------------------------------|
| `!x` | Negaci√≥n             |
| `x && y`   | Conjunci√≥n (y)|
| `x || y` | Disyunci√≥n (o)  |

## Funciones num√©ricas predefinidas

### Funciones de redondeo

| Funci√≥n         | Descripci√≥n                        |
|:--------------------- |:-----------------------------|
| `round(x)`    | Devuelve el entero m√°s pr√≥ximo a `x` |
| `round(x, digits = n)`    | Devuelve al valor m√°s pr√≥ximo a `x` con `n` decimales |
| `floor(x)`    | Redondea `x` al pr√≥ximo entero menor |
| `ceil(x)`     | Redondea `x` al pr√≥ximo entero mayor |
| `trunc(x)`    | Devuelve la parte entera de `x`      |

### Ejemplo de funciones de redondeo

```julia
julia> round(2.7)
3.0

julia> floor(2.7)
2.0

julia> floor(-2.7)
-3.0

julia> ceil(2.7)
3.0

julia> ceil(-2.7)
-2.0

julia> trunc(2.7)
2.0

julia> trunc(-2.7)
-2.0

julia> round(2.5)
2.0

julia> round(2.786, digits = 2)
2.79
```

### Funciones de divisi√≥n

| Funci√≥n                  | Descripci√≥n                                                                                               |
|:------------------------- |:--------------------------------------------------------------------------------------------------------- |
| `div(x,y)`, `x√∑y` | Cociente de la divisi√≥n entera                                                         |
| `fld(x,y)`        | Cociente de la divisi√≥n entera redondeado hacia abajo               |
| `cld(x,y)`        | Cociente de la divisi√≥n entera redondeado hacia arriba                                                         |
| `rem(x,y)`, `x%y` | Resto de la divisi√≥n entera. Se cumple `x == div(x,y)*y + rem(x,y)`                                       |
| `mod(x,y)`        | M√≥dulo con respecto a `y`. Se cumple `x == fld(x,y)*y + mod(x,y)`                                        |
| `gcd(x,y...)`    | M√°ximo com√∫n divisor positivo de `x`, `y`,...                                                          |
| `lcm(x,y...)`   | M√≠nimo com√∫n m√∫ltiplo positivo de `x`, `y`,...                                                            |

### Ejemplo de funciones de divisi√≥n

```julia
julia> div(5,3)
1

julia> cld(5,3)
2

julia> 5%3
2

julia> -5%3
-2

julia> mod(5,3)
2

julia> mod(-5,3)
1

julia> gcd(12,18)
6

julia> lcm(12,18)
36
```

### Funciones para el signo y el valor absoluto

| Funci√≥n                | Descripci√≥n                                                |
|:----------------------- |:---------------------------------------------------------- |
| `abs(x)`        | Valor absoluto de `x`                 |
| `sign(x)`       | Devuelve 1 si `x` es positivo, -1 si es negativo y 0 si es 0.       |

```julia
julia> abs(2.5)
2.5

julia> abs(-2.5)
2.5

julia> sign(-2.5)
-1.0

julia> sign(0)
0

julia> sign(2.5)
1.0
```

### Ra√≠ces, exponenciales y logaritmos

| Funci√≥n                | Descripci√≥n                                                                |
|:------------------------ |:-------------------------------------------------------------------------- |
| `sqrt(x)`, `‚àöx`  | Ra√≠z cuadrada de `x`                                                         |
| `cbrt(x)`, `‚àõx`  | Ra√≠z c√∫bica de `x`                                                           |
| `exp(x)`         | Exponencial de `x`                                        |
| `log(x)`         | Logaritmo neperiano de `x`                                                   |
| `log(b,x)`       | Logaritmo en base `b` de `x`                                                  |
| `log2(x)`        | Logaritmo en base 2 de `x`                                                    |
| `log10(x)`       | Logaritmo en base 10 de `x`                                                   |

### Ejemplo de ra√≠ces, exponenciales y logaritmos

```julia
julia> sqrt(4)
2.0

julia> cbrt(27)
3.0

julia> exp(1)
2.718281828459045

julia> exp(-Inf)
0.0

julia> log(1)
0.0

julia> log(0)
-Inf

julia> log(-1)
ERROR: DomainError with -1.0:
log will only return a complex result if called with a complex argument.
...

julia> log(-1+0im)
0.0 + 3.141592653589793im

julia> log2(2^3)
3.0
```

### Funciones trigonom√©tricas

| Funci√≥n                | Descripci√≥n                                                                |
|:------------------------ |:-------------------------------------------------------------------------- |
| `hypot(x,y)`     | Hipotenusa del tri√°ngulo rect√°ngulo con catetos `x` e `y` |
| `sin(x)`  | Seno del √°ngulo `x` en radianes                                                        |
| `sind(x)`  | Seno del √°ngulo `x` en grados                                                          |
| `cos(x)`         | Coseno del √°ngulo `x` en radianes                                       |
| `cosd(x)`         | Coseno del √°ngulo `x` en grados                                                  |
| `tan(x)`       | Tangente del √°ngulo `x` en radianes                                                  |
| `tand(x)`       | Tangente del √°ngulo `x` en grados                                                  |
| `sec(x)`        | Secante del √°ngulo `x` en radianes                                                 |
| `csc(x)`        | Cosecante del √°ngulo `x` en radianes                                                 |
| `cot(x)`       | Cotangente del √°ngulo `x` en radianes                                                  |

### Ejemplo de funciones trigonom√©tricas

```julia
julia> sin(œÄ/2)
1.0

julia> cos(œÄ/2)
6.123233995736766e-17

julia> cosd(90)
0.0

julia> tan(œÄ/4)
0.9999999999999999

julia> tand(45)
1.0

julia> tan(œÄ/2)
1.633123935319537e16

julia> tand(90)
Inf

julia> sin(œÄ/4)^2 + cos(œÄ/4)^2
1.0
```

### Funciones trigonom√©tricas inversas

| Funci√≥n                | Descripci√≥n                                                                |
|:------------------------ |:-------------------------------------------------------------------------- |
| `asin(x)`        | Arcoseno (inversa del seno) de `x` en radianes                                                 |
| `asind(x)`        | Arcoseno (inversa del seno) de `x` en grados                                                 |
| `acos(x)`       | Arcocoseno (inversa del coseno) de `x` en radianes                                                  |
| `acosd(x)`       | Arcocoseno (inversa del coseno) de `x` en grados                                                  |
| `atan(x)` | Arcotangente (inversa de la tangente) de `x` en radianes |
| `atand(x)` | Arcotangente (inversa de la tangente) de `x` en grados |
| `asec(x)` | Arcosecante (inversa de la secante) de `x` en radianes |
| `acsc(x)` | Arcocosecante (inversa de la cosecante) de `x` en radianes |
| `acot(x)` | Arcocotangente (inversa de la cotangente) de `x` en radianes |

### Ejemplo de funciones trigonom√©tricas inversas

```julia
julia> asin(1)
1.5707963267948966

julia> asind(1)
90.0

julia> acos(-1)
3.141592653589793

julia> atan(1)
0.7853981633974483

julia> atand(tan(œÄ/4))
45.0
```

## Precedencia de operadores

De mayor a menor prioridad.

| Categor√≠a       | Operadores                                                                                      | Asociatividad              |
|:-------------- |:------------------------------------------------------------------------------------------------- |:-------------------------- |
| Exponenciaci√≥n | `^`                                                                                               | Derecha                      |
| Unarios          | `+ - ‚àö`                                                                                           | Derecha                |
| Fracciones     | `//`                                                                                              | Izquierda                       |
| Multiplicaci√≥n | `* / % & \ √∑`                                                                                     | Izquierda                |
| Adici√≥n       | `+ - |` | Izquierda  |
| Comparaciones    | `> < >= <= == != !==`                                                                      |            |
| Asignaciones    | `= += -= *= /= //= ^= √∑= %= |= &=`                                            | Derecha                      |

## Operaciones con cadenas

Las cadenas son secuencias de caracteres alfanum√©ricos del tipo `char` entre dobles comillas.

Cada car√°cter tiene asociado un √≠ndice entero. El primer car√°cter de la cadena tiene √≠ndice 1. 

| | | | | | |
|:-|:-:|:-:|:-:|:-:|:-:|
|√çndice | 1 | 2 | 3 | 4 | 5 |
|Cadena | j | u | l | i | a |

Podemos acceder a cada car√°cter usando su √≠ndice entre corchetes a continuaci√≥n de la cadena:

- `s[i]`: Devuelve el car√°cter con √≠ndice `i` en la cadena `s`.

```julia
julia> c = "julia"
"julia"

julia> c[2]
'u': ASCII/Unicode U+0075 (category Ll: Letter, lowercase)
```

### Acceso a caracteres Unicode

Sin embargo, como Julia permite caracteres [Unicode](https://en.wikipedia.org/wiki/List_of_Unicode_characters), el √≠ndice de un car√°cter en una cadena, no siempre se corresponde con su posici√≥n en la cadena. Ello es debido a que la codificaci√≥n UTF-8 no utiliza el mismo n√∫mero de bytes para representar los caracteres Unicode. Mientras que los caracteres habituales del c√≥digo ASCII (letras romanas y n√∫meros √°rabes) solo necesitan un byte, otros caracteres como los s√≠mbolos matem√°ticos requieren m√°s.

| | | | | | |
|:-|:-:|:-:|:-:|:-:|:-:|
|√çndice | 1 | 4 | 5 | 6 | 9 |
|Cadena | ‚àÄ | x |   | ‚àÉ | y |

### Ejemplo de acceso a caracteres Unicode

```julia
julia> c = "‚àÄx ‚àÉy"
"‚àÄx ‚àÉy"

julia> c[1]
'‚àÄ': Unicode U+2200 (category Sm: Symbol, math)

julia> c[2]
ERROR: StringIndexError: invalid index [2], 
valid nearby indices [1]=>'‚àÄ', [4]=>'x'
Stacktrace:
 [1] string_index_err(s::String, i::Int64)
   @ Base ./strings/string.jl:12
 [2] getindex_continued(s::String, i::Int64, u::UInt32)
   @ Base ./strings/string.jl:233
 [3] getindex(s::String, i::Int64)
   @ Base ./strings/string.jl:226
 [4] top-level scope
   @ REPL[128]:1
```

### Acceso a √≠ndices en cadenas

Las siguientes funciones permiten acceder a los √≠ndices de una cadena:

- `firstindex(c)`: Devuelve el √≠ndice del primer car√°cter de la cadena `c`.
- `lastindex(c)`: Devuelve el √≠ndice del primer car√°cter de la cadena `c`.
- `nextind(c, i)`: Devuelve el √≠ndice del car√°cter de la cadena `c` que sigue al car√°cter con √≠ndice `i`.
- `prevind(c, i)`: Devuelve el √≠ndice del car√°cter de la cadena `c` que sigue al car√°cter con √≠ndice `i`.

### Ejemplo de acceso a √≠ndices en cadenas

```julia
julia> firstindex(c)
1

julia> lastindex(c)
9

julia> c[9]
'y': ASCII/Unicode U+0079 (category Ll: Letter, lowercase)

julia> nextind(c,1)
4

julia> prevind(c, lastindex(c))
6
```

### Subcadenas

Para obtener subcadenas se usan tambi√©n los corchetes indicando los √≠ndices de inicio y fin separados por `:`.

- `s[i:j]`: Devuelve la subcadena que va desde el √≠ndice `i` al √≠ndice `j`, ambos incluidos.

Tambi√©n se pueden obtener subcadenas con la siguiente funci√≥n:

- `SubString(s, i, j)`: Devuelve la subcadena que va desde el √≠ndice `i` al √≠ndice `j`, ambos incluidos.

```julia
julia> c = "julia"
"julia"

julia> c[2:4]
"uli"

julia> SubString(c, 2, 4)
"uli"
```

## Concatenaci√≥n de cadenas

- `a * b`: Devuelve la cadena que resulta de concatenar las cadenas `a` y `b`.
- `a ^ i`: Devuelve la cadena que resulta de repetir la cadena `a` el n√∫mero de veces `i`.
- `repeat(a, i)`: Devuelve la cadena que resulta de repetir la cadena `a` el n√∫mero de veces `i`.

```julia
julia> a = "Hola"
"Hola"

julia> b = "Julia"
"Julia"

julia> a * b
"HolaJulia"

julia> b ^ 3
"JuliaJuliaJulia"
```

### Interpolaci√≥n de cadenas

En una cadena se pueden introducir variables o expresiones precedidas del s√≠mbolo `$`, de manera que al evaluarlas julia sustituye la variable o expresi√≥n por su valor. Esto es muy util para formatear salidas.

```julia
julia> "1 + 2 = $(1 + 2)"
"1 + 2 = 3"

julia> s = "Julia"
"Julia"

julia> "Hola $s"
"Hola Julia"
```

### Otras operaciones comunes con cadenas

- `length(c)`: Devuelve el n√∫mero de caracteres de la cadena `c`.
- `findfirst(a, c)`: Devuelve el √≠ndice de la primera ocurrencia de la cadena `a` en la cadena `c`. Si `a` no es una subcadena de `c` devuelve nada (tipo `Nothing`).
- `findlast(a, c)`: Devuelve el √≠ndice de la √∫ltima ocurrencia de la cadena `a` en la cadena `c`. Si `a` no es una subcadena de `c` devuelve nada (tipo `Nothing`).
- `findnext(a, c, i)`: Devuelve el √≠ndice de la primera ocurrencia de la cadena `a` en la cadena `c` posterior al √≠ndice `i`.
- `findprev(a, c, i)`: Devuelve el √≠ndice de la √∫ltima ocurrencia de la cadena `a` en la cadena `c` anterior al √≠ndice `i`.

### Otras operaciones comunes con cadenas

- `occursin(a, c)`: Devuelve `true` si la cadena `a` es una subcadena de `c`, y `false` en caso contrario.
- `contains(c, a)`: Devuelve `true` si la cadena `a` es una subcadena de `c`, y `false` en caso contrario.
- `replace(c, a => b)`: Devuelve la cadena que resulta de sustituir la cadena `a` por la `b` en la cadena `c`.
- `lowercase(c)`: Devuelve la cadena `c` en min√∫sculas.
- `uppercase(c)`: Devuelve la cadena `c` en may√∫sculas.
- `prefix(c, a)`: Devuelve `true` si la cadena `a` es un prefijo de la cadena `c`.
- `suffix(c, a)`: Devuelve `true` si la cadena `a` es un sufijo de la cadena `c`.
- `split(c, a)`: Devuelve una lista con las cadenas que resulpan de partir la cadena `c` por el delimitador `a`.

### Ejemplo de otras operaciones con cadenas

```julia
julia> c = "Hola Julia"
"Hola Julia"

julia> length(c)
10

julia> findfirst("a", c) 
4:4

julia> findlast("Ju", c)
6:7

julia> findlast("x", c)

julia> occursin("Julia", c)
true

julia> occursin("julia", c)
false

julia> replace(c, "a" => "o")
"Holo Julio"

julia> uppercase(c)
"HOLA JULIA"

julia> split(c, " ")
2-element Vector{SubString{String}}:
 "Hola"
 "Julia"
```

## Entrada y salida por terminal

Las siguientes funciones muestran una cadena en la terminal:

- `print(c)`: Muestra por la terminal la cadena `c` sin cambiar de l√≠nea.
- `println(c)`: Muestra por la terminal la cadena `c` y cambia de l√≠nea.

La siguiente funci√≥n permite leer una l√≠nea de texto desde la terminal:

- `readline()`: Devuelve en una cadena una l√≠nea de texto introducida por el usuario en la terminal (hasta el car√°cter de cambio de l√≠nea `\n`)

```julia
julia> print("¬øC√≥mo te llamas?")
¬øC√≥mo te llamas?
julia> nombre = readline()
Alf            
"Alf"

julia> println("Hola $nombre")
Hola Alf
```

### Conversi√≥n de cadenas en n√∫meros

La funci√≥n `readline()` siempre devuelve una cadena a√∫n cuando se pregunte al usuario por un valor num√©rico. Para convertir una cadena en un dato num√©rico se utiliza la siguiente funci√≥n:

- `parse(tipo, c)`: Covierte la cadena `c` a un n√∫mero del tipo num√©rico `tipo`, siempre que puedad realizarse la conversi√≥n.

```julia
julia> print("Introduce tu edad")
Introduce tu edad
julia> edad = parse(Int, readline())
18
18

julia> println("Vas a cumplir $(edad + 1) a√±os")
Vas a cumplir 19 a√±os

julia> typeof(edad)
Int64
```